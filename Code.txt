#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

// function to sort the subsection a[i .. j] of the array a[]
// function to sort the subsection a[i .. j] of the array a[]
int merge_sort_ascending(int i, int j, int a[], int aux[]) {
	int swap_counter = 0;
	int comparison = 0;

	if (j <= i) {
		return 0;     // the subsection is empty or a single element
	}
	int mid = (i + j) / 2;

	// left sub-array is a[i .. mid]
	// right sub-array is a[mid + 1 .. j]

	merge_sort_ascending(i, mid, a, aux);     // sort the left sub-array recursively
	merge_sort_ascending(mid + 1, j, a, aux);     // sort the right sub-array recursively

	int pointer_left = i;       // pointer_left points to the beginning of the left sub-array
	int pointer_right = mid + 1;        // pointer_right points to the beginning of the right sub-array
	int k;      // k is the loop counter

	// we loop from i to j to fill each element of the final merged array
	for (k = i; k <= j; k++) {
		if (pointer_left == mid + 1) {      // left pointer has reached the limit
			aux[k] = a[pointer_right];
			pointer_right++;
			comparison++;
		}
		else if (pointer_right == j + 1) {        // right pointer has reached the limit
			aux[k] = a[pointer_left];
			pointer_left++;
			comparison++;
		}
		else if (a[pointer_left] < a[pointer_right]) {        // pointer left points to smaller element
			aux[k] = a[pointer_left];
			pointer_left++;
			comparison++;
		}
		else {        // pointer right points to smaller element
			aux[k] = a[pointer_right];
			pointer_right++;
			comparison++;
		}
	}

	for (k = i; k <= j; k++) {      // copy the elements from aux[] to a[]
		a[k] = aux[k];
		swap_counter++;
	}
	printf("\nThe number of comparisons is %d", comparison);
	printf(" \nThe number of swaps is %d ", swap_counter);

}



// function to sort the subsection a[i .. j] of the array a[]
void merge_sort_descending(int i, int j, int a[], int aux[]) {
	int swap_counter = 0;
	int comparison = 0;

	if (j <= i) {
		return;     // the subsection is empty or a single element
	}
	int mid = (i + j) / 2;

	// left sub-array is a[i .. mid]
	// right sub-array is a[mid + 1 .. j]

	merge_sort_descending(i, mid, a, aux);     // sort the left sub-array recursively
	merge_sort_descending(mid + 1, j, a, aux);     // sort the right sub-array recursively

	int pointer_left = i;       // pointer_left points to the beginning of the left sub-array
	int pointer_right = mid + 1;        // pointer_right points to the beginning of the right sub-array
	int k;      // k is the loop counter

	// we loop from i to j to fill each element of the final merged array
	for (k = i; k <= j; k++) {
		if (pointer_left == mid + 1) {      // left pointer has reached the limit
			aux[k] = a[pointer_right];
			pointer_right++;
			comparison++;
		}
		else if (pointer_right == j + 1) {        // right pointer has reached the limit
			aux[k] = a[pointer_left];
			pointer_left++;
			comparison++;
		}
		else if (a[pointer_left] > a[pointer_right]) {        // pointer left points to smaller element
			aux[k] = a[pointer_left];
			pointer_left++;
			comparison++;
		}
		else {        // pointer right points to smaller element
			aux[k] = a[pointer_right];
			pointer_right++;
			comparison++;
		}
	}

	for (k = i; k <= j; k++) {      // copy the elements from aux[] to a[]
		a[k] = aux[k];
		swap_counter++;
	}
	printf("\nThe number of comparisons is %d", comparison);
	printf(" \nThe number of swaps is %d ", swap_counter);
}


int quicksort_ascending(int number[25], int first, int last) {
	int i, j, pivot, temp;
	int swap = 0;
	if (first < last) {
		pivot = first;
		i = first;
		j = last;


		while (i < j) {
			while (number[i] <= number[pivot] && i < last)
				i++;
			swap++;
			while (number[j] > number[pivot])
				j--;
			swap++;
			if (i < j) {
				temp = number[i];
				number[i] = number[j];
				number[j] = temp;

			}
		}

		temp = number[pivot];
		number[pivot] = number[j];
		number[j] = temp;
		quicksort_ascending(number, first, j - 1);
		quicksort_ascending(number, j + 1, last);

	}


	return swap;
}



int quicksort_descending(int number[25], int first, int last) {
	int i, j, pivot, temp;

	if (first < last) {
		pivot = first;
		i = first;
		j = last;

		while (i < j) {
			while (number[i] >= number[pivot] && i < last)
				i++;
			while (number[j] < number[pivot])
				j--;
			if (i < j) {
				temp = number[i];
				number[i] = number[j];
				number[j] = temp;
			}
		}

		temp = number[pivot];
		number[pivot] = number[j];
		number[j] = temp;
		quicksort_descending(number, first, j - 1);
		quicksort_descending(number, j + 1, last);
	}
	return 0;
}



int main() {

	printf("-----Menu----- \n");
	printf(" 1- Ascending Merge Sort.\n 2- Descending Merge Sort.\n 3- Ascending Quick Sort.\n 4- Descending Quick Sort.\n 5-All of them.\n");
	printf("\n choose from the menu sorting ----> ");

	int m;
	scanf("%d", &m);

	if (m == 1) {
		int a[100], aux[100], n, i, d, swap;

		printf("\n Enter Array size: ");
		scanf("%d", &n);

		printf(" Enter Elements: \n");

		for (i = 0; i < n; i++)
			scanf("%d", &a[i]);

		merge_sort_ascending(0, n - 1, a, aux);

		printf("\n\nPrinting the sorted array:\n");

		for (i = 0; i < n; i++)
			printf("%d\n", a[i]);
	}
	if (m == 2) {
		int a[100], aux[100], n, i, d, swap;

		printf("\n Enter Array size: ");
		scanf("%d", &n);

		printf(" Enter Elements: \n");

		for (i = 0; i < n; i++)
			scanf("%d", &a[i]);

		merge_sort_descending(0, n - 1, a, aux);

		printf("\n\nPrinting the sorted array:\n");

		for (i = 0; i < n; i++)
			printf("%d\n", a[i]);
	}
	if (m == 3) {
		int i, n, number[25];

		printf("\n Enter Array size: ");
		scanf("%d", &n);

		printf(" Enter Elements: \n");
		for (i = 0; i < n; i++)
			scanf("%d", &number[i]);

		quicksort_ascending(number, 0, n - 1);

		printf("\n\nPrinting the sorted array:\n");
		for (i = 0; i < n; i++)
			printf(" %d", number[i]);
	}
	if (m == 4) {
		int i, n, number[25];

		printf("\n Enter Array size: ");
		scanf("%d", &n);

		printf(" Enter Elements: \n");
		for (i = 0; i < n; i++)
			scanf("%d", &number[i]);

		quicksort_descending(number, 0, n - 1);

		printf("\n\nPrinting the sorted array:\n");
		for (i = 0; i < n; i++)
			printf(" %d", number[i]);
	}
	if (m == 5) {
		int count_m;
		int count_q;
		int a[100], aux[100], n, i, d, number[25];
		printf("\n Enter Array size: ");
		scanf("%d", &n);
		printf(" Enter Elements: \n");
		for (i = 0; i < n; i++)
			scanf("%d", &a[i]);

		count_m = merge_sort_ascending(0, n - 1, a, aux);
		count_q = quicksort_ascending(number, 0, n - 1);
		printf("Number of swaps in merge sort :%d\n", count_m);
		printf("Number of swaps in quick sort :%d\n", count_q);

		if (count_m < count_q) {
			printf("Merge sort is better \n");

		}
		else {
			printf("Quick sort is better\n");
		}


	}

	printf("\n anyhthing else?");
	scanf("%d");
}